package tzmj.proto.msg;
enum ProtocolType {
     C_2_S_KEEP_ALIVE_ACK = 0;
     S_2_C_KEEP_ALIVE_ACK = 4;
     C_2_S_LOGIN_BASE         = 100;
     C_2_S_LOGIN              = 101;
     S_2_C_LOGIN              = 102;
     C_2_S_RAND_NAME          = 103;
     S_2_C_RAND_NAME          = 104;
     C_2_S_CREATE_ROLE        = 105;
     S_2_C_CREATE_ROLE        = 106;
     C_2_S_LOAD_ROLE_INFO     = 107;
     S_2_C_LOAD_ROLE_INFO     = 108;
     S_2_C_SERVER_TIME        = 109;
	 C_2_S_SWAP_SESSION     = 111;
	 S_2_C_SWAP_SESSION     = 112;
	 C_2_S_LONGITUDE_LATITUDE = 113;
	 S_2_C_LONGITUDE_LATITUDE = 114;
	 C_2_S_RECONNECTION = 115;
	 S_2_C_RECONNECTION = 116;
     C_2_S_LOGIN_TOP          = 200;

     C_2_S_ROLE_BASE            = 1000;
     C_2_S_ROLE_UPDATE_RESOURCE = 1001;
     S_2_C_ROLE_ENCONOMY        = 1004;
     S_2_C_ROLE_FORCE_VALUE     = 1006;
     S_2_C_ROLE_ATTRIBUTE       = 1008;
	 C_2_S_ROLE_LOAD_MAX_RECORD = 1009;
     S_2_C_ROLE_LOAD_MAX_RECORD = 1010;
	 C_2_S_ROLE_UPDATE_UID = 1011;
	 S_2_C_ROLE_UPDATE_UID = 1012;
	 C_2_S_ROLE_QUERY_UID = 1013;
	 S_2_C_ROLE_QUERY_UID = 1014;
	 S_2_C_ROLE_CHARGER_INFO = 1018;
     C_2_S_ROLE_TOP             = 1100;

     C_2_S_ROOM_ENTER             = 1101;
     S_2_C_ROOM_ENTER             = 1102;
     C_2_S_ROOM_PLAYER_LIST       = 1103;
     S_2_C_ROOM_PLAYER_LIST       = 1104;
     C_2_S_ROOM_START             = 1105;
     S_2_C_ROOM_START             = 1106;
     C_2_S_ROOM_READY             = 1107;
     S_2_C_ROOM_READY             = 1108;
     S_2_C_ROOM_TURN_NOTIFY       = 1110;
     S_2_C_ROOM_TURN_BROAD        = 1112;
     C_2_S_ROOM_CHOOSE_ACTION     = 1113;
     S_2_C_ROOM_CHOOSE_ACTION     = 1114;
     C_2_S_ROOM_LOAD_SIDE_INFO    = 1115;
     S_2_C_ROOM_LOAD_SIDE_INFO    = 1116;
	 S_2_C_ROOM_BROAD_PAI_NUM     = 1118;
     S_2_C_ROOM_BROAD_PAI_PLAY    = 1120;
	 S_2_C_ROOM_BROAD_ACTION      = 1122;
	 S_2_C_ROOM_ADD_PAI_LOG       = 1124;
     S_2_C_ROOM_SIDE_PAI_NUM      = 1126;
	 S_2_C_ROOM_HU_NOTIFY         = 1128;
	 S_2_C_ROOM_ACTION_NOTIFY     = 1130;
     C_2_S_ROOM_READY_FOR_REPLAY  = 1131;
     S_2_C_ROOM_READY_FOR_REPLAY  = 1132;
	 S_2_C_ROOM_UPDATE_ROUND = 1134;
	 S_2_C_ROOM_FINISHED = 1136;
	 C_2_S_ROOM_DO_ACTION         = 1157;
     S_2_C_ROOM_DO_ACTION         = 1158;
     S_2_C_ROOM_DO_ACTION_NOTIFY  = 1160;
	 C_2_S_ROOM_REQUEST_QUIT_NOW  = 1161;
     S_2_C_ROOM_REQUEST_QUIT_NOW  = 1162;
     S_2_C_ROOM_QUIT_NOW_NOTIFY   = 1164;
     C_2_S_ROOM_RESPONSE_QUIT_NOW = 1165;
     S_2_C_ROOM_RESPONSE_QUIT_NOW = 1166;
	 C_2_S_ROOM_PLAYER_QUIT = 1167;
     S_2_C_ROOM_PLAYER_QUIT = 1168;
	 C_2_S_ROOM_PLAYER_MONEY   = 1169;
     S_2_C_ROOM_PLAYER_MONEY    = 1170;
	 C_2_S_ROOM_PLAYER_ON_HOLD   = 1171;
     S_2_C_ROOM_PLAYER_ON_HOLD    = 1172;
	 C_2_S_ROOM_PLAYER_OFF_HOLD  = 1173;
     S_2_C_ROOM_PLAYER_OFF_HOL    = 1174;
	 S_2_C_ROOM_DRAW   = 1176;
	 S_2_C_ROOM_FINISHED_TIP_INFO   = 1178;
	 C_2_S_ROOM_CHECK_DISTANCE   = 1179;
	 S_2_C_ROOM_CHECK_DISTANCE    = 1180;
	 C_2_S_ROOM_DEAL_DANGER   = 1181;
     S_2_C_ROOM_DEAL_DANGER   = 1182;
	 C_2_S_ROOM_SEARCH_NEAR_ROOM   = 1183;
     S_2_C_ROOM_SEARCH_NEAR_ROOM   = 1184;
	 S_2_C_ROOM_FORCE_READY_TIME   = 1186;
	 C_2_S_ROOM_ADDRESS_INFO       = 1187;
	 S_2_C_ROOM_ADDRESS_INFO       = 1188;
     C_2_S_CHAT_REALTIME_VOICE = 1201;
     S_2_C_CHAT_REALTIME_VOICE = 1202;
     C_2_S_CHAT_TOP            = 1300;
	 
     C_2_S_MAIL_LOAD            = 1301;
     S_2_C_MAIL_LOAD            = 1302;
     C_2_S_MAIL_READ            = 1303;
     S_2_C_MAIL_READ            = 1304;
     C_2_S_MAIL_DRAW_REWARD     = 1305;
     S_2_C_MAIL_DRAW_REWARD     = 1306;
	 
     C_2_S_ACTIVITY_ROTOR_LOAD  = 1401;
     S_2_C_ACTIVITY_ROTOR_LOAD  = 1402;
     C_2_S_ACTIVITY_ROTOR_RUN   = 1403;
     S_2_C_ACTIVITY_ROTOR_RUN   = 1404;
     C_2_S_ACTIVITY_ROTOR_DRAW  = 1405;
     S_2_C_ACTIVITY_ROTOR_DRAW  = 1406;
	 
	 C_2_S_STORE_COST            = 1501;
     S_2_C_STORE_COST            = 1502;
	 
	C_2_S_FRIEND_LIST 								= 1601;
	S_2_C_FRIEND_LIST 								= 1602;
	C_2_S_FRIEND_SEARCH 							= 1603;
	S_2_C_FRIEND_SEARCH 							= 1604;
	C_2_S_FRIEND_REQUEST_ADD 					= 1605;
	S_2_C_FRIEND_REQUEST_ADD 					= 1606;
	S_2_C_FRIEND_REQUEST_ADD_NOTIFY 		= 1608;
	C_2_S_FRIEND_RESPOND_ADD 					= 1609;
	S_2_C_FRIEND_RESPOND_ADD 					= 1610;
	S_2_C_FRIEND_RESPOND_ADD_NOTIFY 	= 1612;
	C_2_S_FRIEND_CHAT_MESSAGE   = 1613;
	S_2_C_FRIEND_CHAT_MESSAGE   = 1614;
	C_2_S_FRIEND_DEL = 1615;
	S_2_C_FRIEND_DEL   = 1616;
	
	C_2_S_COMPETITION_ENTER   = 1701;
	S_2_C_COMPETITION_ENTER   = 1702;
	C_2_S_COMPETITION_EXIT       = 1703;
	S_2_C_COMPETITION_EXIT       = 1704;
	C_2_S_COMPETITION_ENLIST    = 1705;
	S_2_C_COMPETITION_ENLIST    = 1706;
	C_2_S_COMPETITION_WITHDRAW = 1707;
	S_2_C_COMPETITION_WITHDRAW  = 1708;
	C_2_S_COMPETITION_ENLIST_COUNT = 1709;
	S_2_C_COMPETITION_ENLIST_COUNT  = 1710;
	S_2_C_COMPETITION_START          = 1712;
	C_2_S_COMPETITION_FINISH_ONE_ROUND = 1713;
	S_2_C_COMPETITION_FINISH_ONE_ROUND = 1714;
	S_2_C_COMPETITION_END              = 1716;
	C_2_S_COMPETITION_RECORD   = 1717;
	S_2_C_COMPETITION_RECORD   = 1718;
	C_2_S_COMPETITION_RECEIVE_REWARD  = 1719;
	S_2_C_COMPETITION_RECEIVE_REWARD = 1720;
	
	C_2_S_TASK_LIST   = 1801;
	S_2_C_TASK_LIST   = 1802;
	C_2_S_TASK_RECEIVE_REWARD   = 1803;
	S_2_C_TASK_RECEIVE_REWARD   = 1804;
	
	C_2_S_PRIVATE_RECROD_LIST = 1901;
	S_2_C_PRIVATE_RECORD_LIST = 1902;
	C_2_S_PRIVATE_RECORD_DATA = 1903;
	S_2_C_PRIVATE_RECORD_DATA = 1904;
	C_2_S_PRIVATE_RECORD_ROOM_INFO = 1905;
	S_2_C_PRIVATE_RECORD_ROOM_INFO = 1906;
	C_2_S_PRIVATE_RECORD_ROUND_DATA = 1907;
	S_2_C_PRIVATE_RECORD_ROUND_DATA = 1908;
	C_2_S_PRIVATE_RECORD_ROOM_FINISHED = 1909;
	S_2_C_PRIVATE_RECORD_ROOM_FINISHED = 1910;
	
}

message C2S_SystemTick {
        optional ProtocolType type = 1 [default = C_2_S_KEEP_ALIVE_ACK];
}

message S2C_SystemTick {
        optional ProtocolType type = 1 [default = S_2_C_KEEP_ALIVE_ACK];
        required int32 keep_Alive_Ack = 2; 
}

message Attribute {
        required int32 type = 1;
        required double value = 2;
}

message RewardType {
        optional int32 type = 1;
        optional int32 num = 2;
        optional int32 param1 = 3;
}

message C2S_Login {
        optional ProtocolType type = 1 [default = C_2_S_LOGIN];
        optional string login_Name = 2;
        optional string platform_Id = 3;
        optional string partition_Id = 4;
        optional string source = 5;
        optional int32 timestamp = 6;
        optional int32 fcm = 7;
        optional string ticket = 8;
		optional int32 session_Seed = 9;
}
message Role {
		optional int32 role_Id = 1;
		required int32 level = 2;
		required string name = 3;
}
message S2C_Login {
        optional ProtocolType type = 1 [default = S_2_C_LOGIN];
        repeated Role roles = 2;
		optional string remoteIp = 3;
}

message C2S_RandName {
        optional ProtocolType type = 1 [default = C_2_S_RAND_NAME];
        required int32 sex = 2;
}
message S2C_RandName {
        optional ProtocolType type = 1 [default = S_2_C_RAND_NAME];
        required string name = 2;
}

message C2S_CreateRole {
        optional ProtocolType type = 1 [default = C_2_S_CREATE_ROLE];
        required string name = 2;
        required int32 sex = 3;
}
message S2C_CreateRole {
        enum CreateRoleRet {
             st_ok = 0;
             st_role_name_duplicated = 1;
             st_fail_not_enough_info = 2;
        };
        optional ProtocolType type = 1 [default = S_2_C_CREATE_ROLE];
        required int32 ret = 2;
        required int32 role_Id = 3;
}

message C2S_LoadRoleInfo {
        optional ProtocolType type = 1 [default = C_2_S_LOAD_ROLE_INFO];
        required int32 role_Id = 2;
		optional string urlPic = 3;
}
message S2C_LoadRoleInfo {
        optional ProtocolType type = 1 [default = S_2_C_LOAD_ROLE_INFO];
        optional int32 role_Id = 2;
        optional string role_Name = 3;
        optional int32 level = 4;
        optional int32 vip_Lvl = 5;
		optional int32 room_Id = 6;
		optional int32 room_Type = 7;
        optional int32 diamond = 8;
        optional int32 money = 9;
		optional int32 room_Card = 10;
		optional int32 matchType = 11;
}

message S2C_ServerTime {
        optional ProtocolType type = 1 [default = S_2_C_SERVER_TIME];
        required int32 time = 2;
        optional int32 open_Time = 3;
}

message C2S_SwapSession {
        optional ProtocolType type = 1 [default = C_2_S_SWAP_SESSION];
		optional string login_Id = 2;
        optional int32 role_Id = 3;
		optional int32 session_Seed = 4;
}

message S2C_SwapSession {
        optional ProtocolType type = 1 [default = S_2_C_SWAP_SESSION];
		optional int32 ret = 2;
}

message C2S_LongitudeAndLatitude {
        optional ProtocolType type = 1 [default = C_2_S_LONGITUDE_LATITUDE];
		optional float longtitude = 2;
        optional float latitude = 3;
		optional string address = 4;
}

message S2C_LongitudeAndLatitude {
        optional ProtocolType type = 1 [default = S_2_C_LONGITUDE_LATITUDE];
		optional int32 ret = 2;
}

message S2C_RoleEnconomy {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_ENCONOMY];
        optional int32 level = 2;
        optional int32 vip_lvl = 3;
        optional int32 diamond = 4;
        optional int32 money = 5;
        optional int32 room_Card = 6;
		optional int32 num = 7;
}


message C2S_Reconnection {
        optional ProtocolType type = 1 [default = C_2_S_RECONNECTION];
}

message S2C_Reconnection {
        optional ProtocolType type = 1 [default = S_2_C_RECONNECTION];
		optional int32 ret = 2;  //0 normal   1 room
}


message S2C_RoleForceValue {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_FORCE_VALUE];
        optional int32 force_value = 2;
}

message S2C_RoleAttribute {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_ATTRIBUTE];
        optional int32 cur_exp = 2;
        optional int32 level = 3;
        optional int32 cur_hp = 4;
        optional int32 force_val = 5;
        repeated double attrs = 6;
}

message C2S_RoomEnter {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_ENTER];
        optional int32 room_Type = 2; //0 golden, 1 tournament
        optional int32 room_Id = 3;
		optional int32 max_Round = 4;
		optional int32 person_Count = 5;//0:2person  1:4 person
		optional int32 halve = 6;   //0:no  1:yes
		optional int32 room_Charge = 7;
		optional int32 use_Mammon = 8;//0:no  1:yes
		optional int32 restore_Mammon = 9;//0:no  1:yes
		optional int32 golden_Room_Type = 10;//0 1 2 ;private  -1
		optional int32 privateRoomType = 11;
		optional int32 changeTable = 12;
		optional int32 curRoomId = 13;
}

message S2C_RoomEnter {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_ENTER];
		optional int32 ret = 2; //0 ok, 1 no such room, 2 full  ,3表示金币不足
        optional int32 room_Id = 3;//1是已经开始了,还没结束
        optional int32 state = 4;
        optional int32 side = 5;
        optional int32 room_Type = 6;
        optional int32 round = 7;
        optional int32 max_Round = 8;
		optional int32 dismiss_Left_Time = 9;
		optional int32 person_Count = 10;
		optional int32 halve = 11;
		optional int32 room_Charge = 12;
		optional int32 use_Mammon = 13;
		optional int32 restore_Mammon = 14;
		optional int32 golden_Room_Type = 15;
		optional int32 private_Room_Type = 16;
}

message C2S_RoomPlayerList {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_PLAYER_LIST];
}

message S2C_RoomPlayerList {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_PLAYER_LIST];
        message PlayerInfo {
                optional int32 id = 1;
                optional int32 obj_Type = 2;
                optional int32 pos = 3;
                optional string name = 4;
				optional int32 is_Owner = 5;
				optional int32 ready_Replay = 6;
				optional int32 score = 7;
				optional int32 money = 8;
				optional int32 status = 9;
				optional string urlPic = 10;
				optional string remoteIp = 11;
        }
        repeated PlayerInfo players = 2;
}

message C2S_RoomStart {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_START];
}

message S2C_RoomStart {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_START];
        message Pai {
                optional int32 id = 1;
                optional int32 num = 2;
        }
        optional int32 master_Side = 2;
        repeated int32 random_Values = 3;
        optional int32 de = 4;
        repeated Pai pais = 5;
		optional int32 new_Pai = 6;
}

message C2S_RoomReady {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_READY];
}

message S2C_RoomReady {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_READY];
}

message S2C_RoomTurnNotify {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_TURN_NOTIFY];
        optional int32 pai = 2;
        optional int32 actions = 3; //0 none, 1 chi, 2 peng, 4 gang, 8 hu
        optional int32 cd_time = 4;
		optional int32 extra_Pai = 5;
}

message S2C_RoomTurnBroad {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_TURN_BROAD];
        optional int32 pos = 2;
        optional int32 cd_Time = 3;
		optional int32 or_Actions = 4;
}

message C2S_RoomChooseAction {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_CHOOSE_ACTION];
        optional int32 action = 2;
        repeated int32 pais = 3;
}

message C2S_RoomLoadSideInfo {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_LOAD_SIDE_INFO];
}

message S2C_RoomLoadSideInfo {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_LOAD_SIDE_INFO];
        message Pai {
                optional int32 id = 1;
                optional int32 num = 2;
        }
        message Group {
                repeated int32 pais = 1;
                optional int32 extra = 2;
                optional int32 from_Side = 3;
        }
        message OtherSide {
                optional int32 pos = 1;
                optional int32 left_Num = 2;
                repeated Group groups = 3;
				repeated int32 logs = 4;
        }
        repeated Pai pais = 2;
        repeated int32 logs = 3;
        repeated Group groups = 4;
        optional int32 cur_Action_Side = 5;
        optional int32 cur_Action = 6;
        optional int32 extra_Pai = 7;
        optional int32 action_Cd = 8;
        optional int32 master_Side = 9;
        repeated OtherSide other_Sides = 10;
        repeated int32 random_Values = 11;
        optional int32 left_Num = 12;
		optional int32 de = 13;
		optional int32 new_Pai = 14;
}

message S2C_RoomBroadPaiNum {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_BROAD_PAI_NUM];
        optional int32 num = 2;
		optional int32 tail_Num = 3;// 1 尾部抓牌
}

message S2C_RoomBroadPaiPlay {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_BROAD_PAI_PLAY];
        optional int32 from_Side = 2;
        optional int32 pai = 3;
}

message S2C_RoomBroadAction {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_BROAD_ACTION];
        optional int32 action_Type = 2;
        optional int32 side = 3;
		optional int32 from_Side = 4;
        repeated int32 pais = 5;
		optional int32 extra = 6;
}

message S2C_RoomAddPaiLog {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_ADD_PAI_LOG];
		optional int32 side = 2;
        optional int32 pai = 3;
}

message S2C_RoomSidePaiNum {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_SIDE_PAI_NUM];
        optional int32 side = 2;
        optional int32 pai_Num = 3;
}

message S2C_RoomHuNotify {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_HU_NOTIFY];
        message Group {
                repeated int32 pais = 1;
				optional int32 from_Side = 2;
        }
        message Side {
                optional int32 side = 1;
                optional int32 hu_Val = 2;
                optional int32 score = 3;
                repeated Group groups = 4;
                repeated Group open_Groups = 5;
                optional int32 money = 6;
        }
		optional int32 is_By_Self = 2;
		optional int32 is_Nested = 3;
		optional int32 is_Pengpeng = 4;
		optional int32 tai_Num = 5;
		optional int32 pai_Type = 6; //0 noe, 1 pure, 2 mixed
        optional int32 hu_Side = 7;
        optional int32 hu_Pai = 8;
        repeated Side sides = 9;
		optional int32 take_All_Side = 10;
		optional int32 from_Side = 11;
}

message S2C_RoomActionNotify {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_ACTION_NOTIFY];
        optional int32 actions = 2;
        optional int32 extra_Pai = 3;
}

message C2S_RoomReadyReplay {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_READY_FOR_REPLAY];
}

message S2C_RoomReadyReplay {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_READY_FOR_REPLAY];
        message Item {
                optional int32 side = 1;
                optional int32 ready = 2;
        }
        repeated Item items = 2;
}

message C2S_RoleLoadMaxRecord {
        optional ProtocolType type = 1 [default = C_2_S_ROLE_LOAD_MAX_RECORD];
        optional int32 role_Id = 2;
}

message S2C_RoleLoadMaxRecord {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_LOAD_MAX_RECORD];
        optional int32 role_Id = 2;
        optional int32 total_Round = 3;
        optional int32 total_Win = 4;
        optional int32 max_Consective_Win = 5;
        optional int32 max_Hu_Num = 6;
        optional int32 max_Tai_Num = 7;
        optional int32 max_Hu_Type = 8;
		
		message Group {
			repeated int32 pais = 1;
		}
		repeated Group groups = 9;
		repeated int32 pais = 10;
}

message C2S_RoleUpdateUID {
        optional ProtocolType type = 1 [default = C_2_S_ROLE_UPDATE_UID];
        optional string uid = 2;
}

message S2C_RoleUpdateUID {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_UPDATE_UID];
        optional int32 ret = 2;
}

message C2S_RoleQueryUID {
        optional ProtocolType type = 1 [default = C_2_S_ROLE_QUERY_UID];
        optional int32 role_Id = 2;
}

message S2C_RoleQueryUID {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_QUERY_UID];
        optional int32 ret = 2;
		optional int32 role_Id = 3;
		optional string uid = 4;
}

message S2C_RoleChargeInfo {
        optional ProtocolType type = 1 [default = S_2_C_ROLE_CHARGER_INFO];
        optional string orderId = 2;
		optional int32 payId = 3;
		optional int32 cash = 4;
		optional int32 diamond = 5;
}

message S2C_RoomUpdateRound {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_UPDATE_ROUND];
        optional int32 round = 2;
}

message S2C_RoomFinished {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_FINISHED];
        message Side {
                optional int32 pos = 1;
                optional int32 dian_Pao_Num = 2;
                optional int32 normal_Hu_Num = 3;
                optional int32 by_Self_Num = 4;
                optional int32 pure_Hu_Num = 5;
                optional int32 mixed_Hu_Num = 6;
                optional int32 pair_Hu_Num = 7;
                optional int32 nested_Hu_Num = 8;
                optional int32 total_Score = 9;
				optional int32 winner = 10;// 0 no  1 yes
        }
        repeated Side sides = 2;
}

message C2S_RoomDoAction {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_DO_ACTION];
        optional int32 action = 2;
        optional int32 num = 3;
        optional int32 to_Side = 4;
}

message S2C_RoomDoAction {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_DO_ACTION];
        optional int32 ret = 2;
}

message S2C_RoomDoActionNotify {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_DO_ACTION_NOTIFY];
        optional int32 action = 2;
        optional int32 num = 3;
        optional int32 from_Side = 4;
		optional int32 to_Side = 5;
}

message C2S_RoomRequestQuitNow {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_REQUEST_QUIT_NOW];
}

message S2C_RoomRequestQuitNow {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_REQUEST_QUIT_NOW];
}

message S2C_RoomQuitNowNotify {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_QUIT_NOW_NOTIFY];
        optional int32 id = 2;
        optional int32 side = 3;
}

message C2S_RoomResponseQuitNow {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_RESPONSE_QUIT_NOW];
        optional int32 is_Accepted = 2; //0 reject, 1 accept
}

message S2C_RoomResponseQuitNow {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_RESPONSE_QUIT_NOW];
        optional int32 id = 2;
        optional int32 side = 3;
        optional int32 is_Accepted = 4;
}

message C2S_RoomPlayerQuit {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_PLAYER_QUIT];
}

message S2C_RoomPlayerQuit {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_PLAYER_QUIT];
        optional int32 id = 2;
        optional int32 side = 3;
		optional int32 ret = 4;
}

message C2S_RoomPlayerMoney {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_PLAYER_MONEY];
}

message S2C_RoomPlayerMoney {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_PLAYER_MONEY];
		message SideInfo{
			optional int32 id = 1;
			optional int32 pos = 2;
			optional int32 money = 3;
		}
        repeated SideInfo side_Info = 2;
}

message C2S_RoomPlayerOnHold {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_PLAYER_ON_HOLD];
}

message S2C_RoomPlayerOnHold {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_PLAYER_ON_HOLD];
        optional int32 ret = 2;
		optional int32 id = 3;
}

message C2S_RoomPlayerQOffHold {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_PLAYER_OFF_HOLD];
}

message S2C_RoomPlayerOffHold {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_PLAYER_OFF_HOL];
        optional int32 ret = 2;
		optional int32 id = 3;
}

message S2C_RoomDraw {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_DRAW];
}

message S2C_RoomFinishTipInfo {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_FINISHED_TIP_INFO];
		message HuInfo{
			optional int32 type = 1;
			optional int32 num = 2;
		}
		message TaiInfo{
			optional int32 type = 1;
			optional int32 num = 2;
		}
		message SideInfo{
			optional int32 pos = 1;
			repeated HuInfo huInfo = 2;
			repeated TaiInfo taiInfo = 3;
		}
		repeated SideInfo sideInfo = 2;
}

message C2S_RoomCheckDistance {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_CHECK_DISTANCE];
}

message S2C_RoomCheckDistance {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_CHECK_DISTANCE];
        optional int32 ret = 2;
}

message C2S_RoomDealGanger {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_DEAL_DANGER];
		optional int32 ignore = 2;
}

message S2C_RoomDealGanger {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_DEAL_DANGER];
        message DealInfo{
			optional int32 pos = 1;
			optional int32 ignore = 2;
		}
		repeated DealInfo dealInfos = 2;
}

message C2S_RoomSearchNearRoom {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_SEARCH_NEAR_ROOM];
}

message S2C_RoomSearchNearRoom {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_SEARCH_NEAR_ROOM];
        message RoomInfo{
			optional int32 roomId = 1;
			optional int32 privateRoomType = 2;
			optional int32 maxRound = 3;
			optional int32 maxSide = 4;
			optional string ownerName = 5;
			optional int32 chargeRoomType = 6;
			optional int32 useMammon = 7;
			optional int32 restoreMamon = 8;
			repeated string picUrls = 9;
		}
		repeated RoomInfo roomInfos = 2;
}

message C2S_RoomForceReadyTime {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_FORCE_READY_TIME];
        optional int32 time = 2;
}

message C2S_ChatRealtimeVoice {
        optional ProtocolType type = 1 [default = C_2_S_CHAT_REALTIME_VOICE];
        optional string data = 2;
}

message S2C_ChatRealtimeVoice {
        optional ProtocolType type = 1 [default = S_2_C_CHAT_REALTIME_VOICE];
        optional int32 id = 2;
        optional string name = 3;
        optional string data = 4;
}

message C2S_RoomAddressInfo {
        optional ProtocolType type = 1 [default = C_2_S_ROOM_ADDRESS_INFO];
}

message S2C_RoomAddressInfo {
        optional ProtocolType type = 1 [default = S_2_C_ROOM_ADDRESS_INFO];
        message RoleInfo {
			optional int32 id = 1;
			optional float distance = 2;
			optional string address = 3;
		}
		message interactInfo {
			optional int32 id = 1;
			optional string address = 2;
			repeated RoleInfo infos = 3;
		}
		repeated interactInfo infos = 2;
}

message C2S_MailLoad {
        optional ProtocolType type = 1 [default = C_2_S_MAIL_LOAD];
        optional int32 ts = 2;
}

message MailInfo {
        optional int32 id = 1;
        optional int32 type = 2;// 0 正常邮件  1 好友申请  2 还有申请反馈   3 道具赠送申请  4  道具申请反馈
        optional int32 read = 3;
        optional int32 rwd_Draw = 4;
        optional int32 timestamp = 5;
        optional string reward_Str = 6;
        optional string title = 7;
        optional string content = 8;
		optional int32 sender_Id = 9;
		optional string sender_Name = 10;
}

message S2C_MailLoad {
        optional ProtocolType type = 1 [default = S_2_C_MAIL_LOAD];
        repeated MailInfo mails = 2;
}

message C2S_MailRead {
        optional ProtocolType type = 1 [default = C_2_S_MAIL_READ];
        optional int32 mail_Type = 2;
        repeated int32 ids = 3;
}

message S2C_MailRead {
        optional ProtocolType type = 1 [default = S_2_C_MAIL_READ];
        optional int32 mail_Type = 2;
        repeated int32 ids = 3;
}

message C2S_MailDrawReward {
        optional ProtocolType type = 1 [default = C_2_S_MAIL_DRAW_REWARD];
        optional int32 mail_Type = 2;
        repeated int32 ids = 3;
}

message S2C_MailDrawReward {
        optional ProtocolType type = 1 [default = S_2_C_MAIL_DRAW_REWARD];
        optional int32 mail_Type = 2;
        repeated int32 ids = 3;
} 


message C2S_ActivityRotorLoad {
        optional ProtocolType type = 1 [default = C_2_S_ACTIVITY_ROTOR_LOAD];
}

message S2C_ActivityRotorLoad {
        optional ProtocolType type = 1 [default = S_2_C_ACTIVITY_ROTOR_LOAD];
        optional int32 num = 2;
}

message C2S_ActivityRotorRun {
        optional ProtocolType type = 1 [default = C_2_S_ACTIVITY_ROTOR_RUN];
}

message S2C_ActivityRotorRun {
        optional ProtocolType type = 1 [default = S_2_C_ACTIVITY_ROTOR_RUN];
        optional int32 id = 2;
}

message C2S_ActivityRotorDraw {
        optional ProtocolType type = 1 [default = C_2_S_ACTIVITY_ROTOR_DRAW];
}

message S2C_ActivityRotorDraw {
        optional ProtocolType type = 1 [default = S_2_C_ACTIVITY_ROTOR_DRAW];
        optional int32 id = 2;
}

message C2S_STORE_COST {
        optional ProtocolType type = 1 [default = C_2_S_STORE_COST];
		optional int32 id = 2;
}

message S2C_STORE_COST {
        optional ProtocolType type = 1 [default = S_2_C_STORE_COST];
        optional int32 ret = 2;
		optional int32 id = 3;
}

message C2S_FriendList {
        optional ProtocolType type = 1 [default = C_2_S_FRIEND_LIST];
        optional int32 id = 2;
}

message S2C_FriendList {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_LIST];

        message FriendInfo{
            optional int32 id = 1;
            optional string name = 2;
            optional int32 status = 3;
			optional string urlPic = 4;
        }

        repeated FriendInfo friend_Info = 2;
}

message C2S_FriendSearch {
        optional ProtocolType type = 1 [default = C_2_S_FRIEND_SEARCH];
        optional string key = 2;
}

message S2C_FriendSearch {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_SEARCH];

        message PlayerInfo {
            optional int32 id = 1;
            optional string name = 2;
            optional int32 status = 3;
			optional string urlPic = 4;
        }

        repeated PlayerInfo player_Info = 2;
}

message C2S_FriendRequestAdd {
        optional ProtocolType type = 1 [default = C_2_S_FRIEND_REQUEST_ADD];
        optional int32 request_Id = 2;
        optional int32 respond_Id = 3;
}

message S2C_FriendRequestAdd {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_REQUEST_ADD];
        optional int32 ret = 2;
}

message S2C_FriendRequestAddNotify {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_REQUEST_ADD_NOTIFY];
        optional int32 request_Id = 2;
        optional string request_Name = 3;
}

message C2S_FriendRepondAdd {
        optional ProtocolType type = 1 [default = C_2_S_FRIEND_RESPOND_ADD];
        optional int32 ret = 2;
        optional int32 respond_Id = 3;
        optional int32 request_Id = 4;
}

message S2C_FriendRespondAdd {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_RESPOND_ADD];
        optional int32 ret = 2;
}

message S2C_FriendRespondAddNotify {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_RESPOND_ADD_NOTIFY];
        optional int32 ret = 2;
        optional int32 respond_Id = 3;
        optional string respond_Name = 4;
		optional string urlPic = 5;
}

message C2S_FriendChatMessage {
        optional ProtocolType type = 1 [default = C_2_S_FRIEND_CHAT_MESSAGE];
        optional int32 receivedRoleId = 2;
		optional string message = 3;
}

message S2C_FriendChatMessage {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_CHAT_MESSAGE];
        optional int32 sendRoleId = 2;
		optional int32 receivedRoleId = 3;
        optional string message = 4;
}

message C2S_FriendDel {
        optional ProtocolType type = 1 [default = C_2_S_FRIEND_DEL];
        optional int32 roleId = 2;
}

message S2C_FriendDel {
        optional ProtocolType type = 1 [default = S_2_C_FRIEND_DEL];
        optional int32 ret = 2;
}


message C2S_CompetitionEnter {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_ENTER];
        optional int32 roleId = 2;
}

message S2C_CompetitionEnter {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_ENTER];
		optional int32 ret = 2;
}

message C2S_CompetitionExit {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_EXIT];
        optional int32 roleId = 2;
}

message S2C_CompetitionExit {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_EXIT];
		optional int32 ret = 2;
}

message C2S_CompetitionEnlist {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_ENLIST];
        optional int32 competitionType = 2;
        optional int32 roleId = 3;
}

message S2C_CompetitionEnlist {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_ENLIST];
		optional int32 ret = 2;
		optional int32 competitionType = 3;
}

message C2S_CompetitionWithdraw {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_WITHDRAW];
		optional int32 competitionType = 2;
        optional int32 roleId = 3;
}

message S2C_CompetitionWithdraw {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_WITHDRAW];
		optional int32 ret = 2;
		
}

message C2S_CompetitionEnlistCount {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_ENLIST_COUNT];
}

message S2C_CompetitionEnlistCount {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_ENLIST_COUNT];

        message CompetitionInfo {
                optional int32 type = 1;
                optional int32 count = 2;
        }

        repeated CompetitionInfo infos = 2;
}

message S2C_CompetitionStart {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_START];
		optional int32 roomId = 2;
        optional int32 roomType = 3;
}

message C2S_CompetitionFinishRound {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_FINISH_ONE_ROUND];
}

message S2C_CompetitionFinishRound {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_FINISH_ONE_ROUND];
		optional int32 competitionType = 2;
		optional int32 remianTableNum = 3;
        optional int32 ranking = 4;
		optional int32 score = 5;
		optional int32 promotion = 6;
}

message S2C_CompetitionEnd {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_END];
		optional int32 competitionType = 2;
		optional int32 ranking = 3;
		optional int32 score = 4;
		optional int32 rewardType = 5;
		optional int32 rewardNum = 6;
}

message C2S_CompetitionRecord {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_RECORD];
}

message S2C_CompetitionRecord {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_RECORD];

        message EachRecord {
                optional int32 id = 1;
                optional int32 type = 2;
				optional int32 ranking = 3;
                optional int32 time = 4;
				optional int32 received = 5;
        }

        repeated EachRecord records = 2;
}

message C2S_CompetitionReceiveReward {
        optional ProtocolType type = 1 [default = C_2_S_COMPETITION_RECEIVE_REWARD];
		optional int32 id = 2;
}

message S2C_CompetitionReceiveReward {
        optional ProtocolType type = 1 [default = S_2_C_COMPETITION_RECEIVE_REWARD];
		optional int32 ret = 2;
		optional int32 id = 3;
}

message C2S_TaskList {
        optional ProtocolType type = 1 [default = C_2_S_TASK_LIST];
		optional int32 id = 2;
}

message S2C_TaskList {
        optional ProtocolType type = 1 [default = S_2_C_TASK_LIST];
		message TaskItem {
			optional int32 id = 1;
			optional int32 times = 2;
			optional int32 state = 3;
		}
		repeated TaskItem tasks = 2;
}

message C2S_TaskReceiveReward {
        optional ProtocolType type = 1 [default = C_2_S_TASK_RECEIVE_REWARD];
		optional int32 id = 2;
}

message S2C_TaskReceiveReward {
        optional ProtocolType type = 1 [default = S_2_C_TASK_RECEIVE_REWARD];
		optional int32 ret = 2;
		optional int32 id = 3;
}

message RoundData {
    message PlayerInfo {
        optional int32 roleId = 1;
        optional string roleName = 2;
        optional string urlPic = 3;
    }

    message OriginPais {
        repeated int32 pais = 1;
    }

    message OperateItem {
        optional int32 pos = 1;
        optional int32 type = 2;//action 0--->摸牌 1--->打牌 2--->吃牌 3--->碰牌 4--->杠牌 5--->胡牌
        optional int32 pai = 3;
        repeated int32 pais = 4;
        optional int32 fromSide = 5;
    }

	optional int32 roomId = 1;
	optional int32 roundIndex = 2;
	optional int32 deId = 3;
	optional int32 masterPos = 4;
	repeated PlayerInfo playerInfos = 5;
	repeated OriginPais originPais = 6;
	repeated OperateItem operateItems = 7;
	optional S2C_RoomHuNotify huNotify = 8;
	optional S2C_RoomFinishTipInfo tipInfos = 9;
}

message C2S_PrivateRecordList {
    optional ProtocolType type = 1 [default = C_2_S_PRIVATE_RECROD_LIST];
}

message S2C_PrivateRecordList {
    optional ProtocolType type = 1 [default = S_2_C_PRIVATE_RECORD_LIST];
	
	message PlayerInfo {
        optional int32 roleId = 1;
        optional string roleName = 2;
        optional int32 score = 3;
    }

    message EachRecord {
        optional int32 roomId = 1;
        optional int32 privateType = 2;
        optional int32 maxRound = 3;
        optional int32 maxSide = 4;
		optional int32 halve = 5;
        optional int32 chargeRoomType = 6;
        optional int32 useMammon = 7;
        optional int32 restoreMammon = 8;
		optional int32 time = 9;
		repeated PlayerInfo playerInfos = 10;
    }

    repeated EachRecord records = 2;
}

message C2S_PrivateRecordData {
    optional ProtocolType type = 1 [default = C_2_S_PRIVATE_RECORD_DATA];
    optional int32 roomId = 2;
}

message S2C_PrivateRecordData {
    optional ProtocolType type = 1 [ default = S_2_C_PRIVATE_RECORD_DATA];

    message PlayerInfo {
        optional int32 roleId = 1;
        optional string roleName = 2;
        optional string urlPic = 3;
    }

    message OriginPais {
        repeated int32 pais = 1;
    }

    message OperateItem {
        optional int32 pos = 1;
        optional int32 type = 2;//action 0--->摸牌 1--->打牌 2--->吃牌 3--->碰牌 4--->杠牌 5--->胡牌
        optional int32 pai = 3;
        repeated int32 pais = 4;
        optional int32 fromSide = 5;
    }

    message RoundData {
        optional int32 roomId = 1;
        optional int32 roundIndex = 2;
        optional int32 deId = 3;
        optional int32 masterPos = 4;
        repeated PlayerInfo playerInfos = 5;
        repeated OriginPais originPais = 6;
        repeated OperateItem operateItems = 7;
		repeated S2C_RoomHuNotify huNotify = 8;
		repeated S2C_RoomFinishTipInfo tipInfos = 9;	
    }
    repeated RoundData datas = 2;
	repeated S2C_RoomFinished finishInfo = 3;
}

message C2S_PrivateRecordRoomInfo {
    optional ProtocolType type = 1 [default = C_2_S_PRIVATE_RECORD_ROOM_INFO];
    optional int32 roomId = 2;
}

message S2C_PrivateRecordRoomInfo {
    optional ProtocolType type = 1 [default = S_2_C_PRIVATE_RECORD_ROOM_INFO];

    message PlayerInfo {
        optional int32 roleId = 1;
        optional string roleName = 2;
        optional int32 score = 3;
    }

    message RoundInfo {
        optional int32 roundIndex = 1;
        optional int32 createTime = 2;
        repeated PlayerInfo playerInfo = 3;
    }
	repeated RoundInfo roundInfos = 2;
}

message C2S_PrivateRecordRoundData {
    optional ProtocolType type = 1 [default = C_2_S_PRIVATE_RECORD_ROUND_DATA];
    optional int32 roomId = 2;
    optional int32 roundIndex = 3;
}

message S2C_PrivateRecordRoundData{
    optional ProtocolType type = 1 [default = S_2_C_PRIVATE_RECORD_ROUND_DATA];
    optional RoundData roundData = 2;
}

message C2S_PrivateRecordRoomFinished {
    optional ProtocolType type = 1 [default = C_2_S_PRIVATE_RECORD_ROOM_FINISHED];
    optional int32 roomId = 2;
}

message S2C_PrivateRecordRoomFinished {
    optional ProtocolType type = 1 [default = S_2_C_PRIVATE_RECORD_ROOM_FINISHED];
    repeated S2C_RoomFinished roomFinisheds = 2;
}



