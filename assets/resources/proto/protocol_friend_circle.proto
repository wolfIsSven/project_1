package protocol;

import "report.proto";

enum FriendCircleProtoType {
     C_2_S_FRIEND_CIRCLE_LOAD               = 1101;
     S_2_C_FRIEND_CIRCLE_LOAD               = 1102;
     C_2_S_FRIEND_CIRCLE_LOAD_FRIENDS       = 1103;
     S_2_C_FRIEND_CIRCLE_LOAD_FRIENDS       = 1104;
     C_2_S_FRIEND_CIRCLE_LOAD_APPLY         = 1105;
     S_2_C_FRIEND_CIRCLE_LOAD_APPLY         = 1106;
     C_2_S_FRIEND_CIRCLE_UPDATE_SETTING     = 1107;
     S_2_C_FRIEND_CIRCLE_UPDATE_SETTING     = 1108;
     C_2_S_FRIEND_CIRCLE_UPGRADE            = 1109;
     S_2_C_FRIEND_CIRCLE_UPGRADE            = 1110;
     C_2_S_FRIEND_CIRCLE_DISBAND            = 1111;
     S_2_C_FRIEND_CIRCLE_DISBAND            = 1112;
     C_2_S_FRIEND_CIRCLE_KICK_MEMBER        = 1113;
     S_2_C_FRIEND_CIRCLE_KICK_MEMBER        = 1114;
     C_2_S_FRIEND_CIRCLE_APPLY              = 1115;
     S_2_C_FRIEND_CIRCLE_APPLY              = 1116;
     C_2_S_FRIEND_CIRCLE_AFFIRM_APPLY       = 1117;
     S_2_C_FRIEND_CIRCLE_AFFIRM_APPLY       = 1118;
     C_2_S_FRIEND_CIRCLE_REMARKS            = 1119;
     S_2_C_FRIEND_CIRCLE_REMARKS            = 1120;
     C_2_S_FRIEND_CIRCLE_LOAD_ROOMS         = 1121;
     S_2_C_FRIEND_CIRCLE_LOAD_ROOMS         = 1122;
     C_2_S_FRIEND_CIRCLE_CREATE_DEFAULT_ROOM = 1123;
     S_2_C_FRIEND_CIRCLE_CREATE_DEFAULT_ROOM = 1124;
     C_2_S_FRIEND_CIRCLE_REMOVE_DEFAULT_ROOM = 1125;
     S_2_C_FRIEND_CIRCLE_REMOVE_DEFAULT_ROOM = 1126;
     C_2_S_FRIEND_CIRCLE_CREATE             = 1127;
     S_2_C_FRIEND_CIRCLE_CREATE             = 1128;
     C_2_S_FRIEND_CIRCLE_SEND_CARD          = 1129;
     S_2_C_FRIEND_CIRCLE_SEND_CARD          = 1130;
     C_2_S_FRIEND_CIRCLE_LOAD_CARD_APPLY    = 1131;
     S_2_C_FRIEND_CIRCLE_LOAD_CARD_APPLY    = 1132;
     C_2_S_FRIEND_CIRCLE_APPLY_CARD         = 1133;
     S_2_C_FRIEND_CIRCLE_APPLY_CARD         = 1134;
     C_2_S_FRIEND_CIRCLE_AFFIRM_CARD        = 1135;
     S_2_C_FRIEND_CIRCLE_AFFIRM_CARD        = 1136;
     C_2_S_FRIEND_CIRCLE_EXIT               = 1137;
     S_2_C_FRIEND_CIRCLE_EXIT               = 1138;
     C_2_S_FRIEND_CIRCLE_RENEW              = 1139;
     S_2_C_FRIEND_CIRCLE_RENEW              = 1140;
     C_2_S_FRIEND_CIRCLE_LOAD_LOGS          = 1141;
     S_2_C_FRIEND_CIRCLE_LOAD_LOGS          = 1142;
     C_2_S_FRIEND_CIRCLE_LOAD_RANK          = 1143;
     S_2_C_FRIEND_CIRCLE_LOAD_RANK          = 1144;
     C_2_S_FRIEND_CIRCLE_LOAD_STAT          = 1145;
     S_2_C_FRIEND_CIRCLE_LOAD_STAT          = 1146;

     S_2_C_FRIEND_CIRCLE_CREATE_OTHER_ROOM  = 1152;
     S_2_C_FRIEND_CIRCLE_JOIN_ROOM          = 1154;
     S_2_C_FRIEND_CIRCLE_ROOM_STATE         = 1156;
}

message FriendCircle {
        required int32 id = 1;
        required string name = 2;
        optional string phone = 3;
        optional int32 vip = 4;
        optional int32 cd = 5;
        optional int32 member_count = 6;
        optional string broad_msg = 7;
        optional string leader_login_name = 8;
}

message FriendMember {
        required string login_name = 1;
        required string role_name = 2;
        optional int32 uid = 3;
        optional string weixin = 4;
        optional string head_url = 5;
        optional int32 total_nums = 6;
        optional int32 win_nums = 7;
        optional string remarks = 8;
        optional int32 card_nums = 9;
        optional int64 ts = 10;
        optional int32 apply_card_times = 11;
        optional int64 apply_card_ts = 12;
        optional int32 is_online = 13;
        optional string msg = 14;
}

message C2S_FriendCircleLoad {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD];
        optional int32 unique_id = 2;
}

message S2C_FriendCircleLoad {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD];
        required int32 ret = 2;
        repeated FriendCircle circles = 3;
        optional int32 is_new = 4;
}

message C2S_FriendCircleCreate {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_CREATE];
        optional int32 unique_id = 2;
}

message S2C_FriendCircleCreate {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_CREATE];
        required int32 ret = 2;
        optional FriendCircle circle = 3;
}

message C2S_FriendCircleLoadFriends {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_FRIENDS];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
}

message S2C_FriendCircleLoadFriends {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_FRIENDS];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        repeated FriendMember members = 4;
}

message C2S_FriendCircleLoadApply {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_APPLY];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
}

message S2C_FriendCircleLoadApply {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_APPLY];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        repeated FriendMember members = 4;
}

message C2S_FriendCircleUpdateSetting {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_UPDATE_SETTING];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional string name = 4;
        optional string broad_msg = 5;
        optional string phone = 6;
}

message S2C_FriendCircleUpdateSetting {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_UPDATE_SETTING];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional string name = 4;
        optional string broad_msg = 5;
        optional string phone = 6;
}

message C2S_FriendCircleUpgrade {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_UPGRADE];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional int32 vip = 4;
}

message S2C_FriendCircleUpgrade {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_UPGRADE];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional int32 vip = 4;
        optional int32 cd = 5;
}

message C2S_FriendCircleRenew {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_RENEW];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional int32 vip = 4;
        optional int32 renew_id = 5;
}

message S2C_FriendCircleRenew {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_RENEW];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional int32 vip = 4;
        optional int32 cd = 5;
}

message C2S_FriendCircleDisband {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_DISBAND];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
}

message S2C_FriendCircleDisband {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_DISBAND];
        required int32 ret = 2;
        optional int32 circle_id = 3;
}

message C2S_FriendCircleKickMember {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_KICK_MEMBER];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional string login_name = 4;
}

message S2C_FriendCircleKickMember {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_KICK_MEMBER];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional string login_name = 4;
}

message C2S_FriendCircleApply {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_APPLY];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional string msg = 4;
}

message S2C_FriendCircleApply {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_APPLY];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
        optional string msg = 5;
}

message C2S_FriendCircleAffirmApply {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_AFFIRM_APPLY];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
        optional int32 op_type = 5;
}

message S2C_FriendCircleAffirmApply {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_AFFIRM_APPLY];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
        optional int32 op_type = 5;
}

message C2S_FriendCircleRemarks {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_REMARKS];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
        optional string remarks = 5;
}

message S2C_FriendCircleRemarks {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_REMARKS];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
        optional string remarks = 5;
}

message C2S_FriendCircleExit {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_EXIT];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
}

message S2C_FriendCircleExit {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_EXIT];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
}

message CircleRoomPlayer {
        required string login_name = 1;
        optional string role_name = 2;
        optional string head_url = 3;
        optional int32 index = 4;
}

message CircleRoom {
        required int64 room_id = 1;
        optional int32 rule_type = 2;
        optional int32 round_limit = 3;
        optional int32 player_limit = 4;
        optional int32 fan_limit = 5;
        optional int32 condition = 6;
        optional uint64 switch_set = 7;
        optional int32 state = 8;
        optional int32 cur_round = 9;
        optional int32 max_round = 10;
        repeated CircleRoomPlayer players = 11;
}

message C2S_FriendCircleLoadRooms {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_ROOMS];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional int64 room_id = 4;
}

message S2C_FriendCircleLoadRooms {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_ROOMS];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional int64 room_id = 4;
        repeated CircleRoom rooms = 5;
}

message C2S_FriendCircleCreateDefaultRoom {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_CREATE_DEFAULT_ROOM];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional int32 rule_type = 4;
        optional int32 condition = 5;
        optional int32 round_limit = 6;
        optional int32 player_limit = 7;
        optional int32 fan_limit = 8;
        optional int32 bird_limit = 9;
        optional uint64 switch_set = 10;
}

message S2C_FriendCircleCreateDefaultRoom {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_CREATE_DEFAULT_ROOM];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional int64 room_id = 4;
        optional int32 rule_type = 5;
        optional int32 condition = 6;
        optional int32 round_limit = 7;
        optional int32 player_limit = 8;
        optional int32 fan_limit = 9;
        optional int32 bird_limit = 10;
        optional uint64 switch_set = 11;
}

message C2S_FriendCircleRemoveDefaultRoom {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_REMOVE_DEFAULT_ROOM];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional int64 room_id = 4;
}

message S2C_FriendCircleRemoveDefaultRoom {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_REMOVE_DEFAULT_ROOM];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional int64 room_id = 4;
}

message C2S_FriendCircleSendCard {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_SEND_CARD];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional string member_login_name = 4;
        optional int32 card_nums = 5;
}

message S2C_FriendCircleSendCard {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_SEND_CARD];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional string member_login_name = 4;
        optional int32 card_nums = 5;
}

message FriendCardApply {
        required string login_name = 1;
        optional int64 ts = 2;
        optional int32 card_nums = 3;
}

message C2S_FriendCircleLoadCardApply{
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_CARD_APPLY];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
}

message S2C_FriendCircleLoadCardApply {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_CARD_APPLY];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        repeated FriendCardApply applys = 4;
}

message C2S_FriendCircleApplyCard {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_APPLY_CARD];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional int32 card_nums = 4;
}

message S2C_FriendCircleApplyCard {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_APPLY_CARD];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional string login_name = 4;
        optional int64 ts = 5;
        optional int32 card_nums = 6;
}

message C2S_FriendCircleAffirmCard {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_AFFIRM_CARD];
        optional int32 unique_id = 2;
        optional int32 circle_id =3;
        optional int32 op_type = 4;
        optional string login_name = 5;
        optional int64 ts = 6;
}

message S2C_FriendCircleAffirmCard {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_AFFIRM_CARD];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional int32 op_type = 4;
        optional string login_name = 5;
        optional int64 ts = 6;
        optional int32 card_nums = 7;
}

message C2S_FriendCircleLoadLogs {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_LOGS];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
}

message S2C_FriendCircleLoadLogs {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_LOGS];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        repeated ResultReport reports = 4;
}

message CircleMemberRank {
        required string login_name = 1;
        required string role_name = 2;
        optional int32 uid = 3;
        optional int32 round = 4;
        optional int32 integal = 5;
}
message C2S_FriendCircleLoadRank {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_RANK];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
        optional int32 date_type = 4;
}

message S2C_FriendCircleLoadRank {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_RANK];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional int32 date_type = 4;
        repeated CircleMemberRank ranks = 5;
}

message CircleStat {
        optional int32 total_round = 1;
        optional int32 total_send_card = 2;
}
message C2S_FriendCircleLoadStat {
        optional FriendCircleProtoType type = 1 [default = C_2_S_FRIEND_CIRCLE_LOAD_STAT];
        optional int32 unique_id = 2;
        optional int32 circle_id = 3;
}

message S2C_FriendCircleLoadStat {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_LOAD_STAT];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        repeated CircleStat stat = 4;
}

message S2C_FriendCircleCreateOtherRoom {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_CREATE_OTHER_ROOM];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional int32 rule_type = 4;
        optional string params = 5;
        optional CircleRoomPlayer creator = 6;
}

message S2C_FriendCircleJoinRoom {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_JOIN_ROOM];
        required int32 ret = 2;
        optional int32 circle_id =3;
        optional int64 room_id = 4;
        optional CircleRoomPlayer player = 5;
}

message S2C_FriendCircleRoomState {
        optional FriendCircleProtoType type = 1 [default = S_2_C_FRIEND_CIRCLE_ROOM_STATE];
        required int32 ret = 2;
        optional int32 circle_id = 3;
        optional int64 room_id = 4;
        optional int32 is_delete = 5;
}