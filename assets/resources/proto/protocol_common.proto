package protocol;

import "report.proto";
import "protocol_main.proto";

enum CommonProtoType {
     C_2_S_COMMON_ROOM_REQUIRE_EXIT  = 501;
     S_2_C_COMMON_ROOM_REQUIRE_EXIT  = 502;
     C_2_S_COMMON_ROOM_AGREE_EXIT    = 503;
     S_2_C_COMMON_ROOM_AGREE_EXIT    = 504;
     C_2_S_COMMON_ROOM_DISBAND       = 505;
     S_2_C_COMMON_ROOM_DISBAND       = 506;
     C_2_S_COMMON_ROOM_INFO          = 507;
     S_2_C_COMMON_ROOM_INFO          = 508;
     C_2_S_COMMON_ROOM_LIST          = 509;
     S_2_C_COMMON_ROOM_LIST          = 510;

     C_2_S_COMMON_LOAD_RESULT_LOGS   = 511;
     S_2_C_COMMON_LOAD_RESULT_LOGS   = 512;
     C_2_S_COMMON_VOICE_FILEID       = 513;
     S_2_C_COMMON_VOICE_FILEID       = 514;

     C_2_S_COMMON_STORE_BUY          = 515;
     S_2_C_COMMON_STORE_BUY          = 516;

     C_2_S_COMMON_SOME_STATISTICS    = 517;
     S_2_C_COMMON_SOME_STATISTICS    = 518;

     C_2_S_COMMON_ROOM_CHAT          = 519;
     S_2_C_COMMON_ROOM_CHAT          = 520;

     C_2_S_COMMON_LOAD_COMPETITION_LOGS   = 521;
     S_2_C_COMMON_LOAD_COMPETITION_LOGS   = 522;

     C_2_S_COMMON_ACCOUNT_GEO_AND_ADDRESS   = 525;
     S_2_C_COMMON_ACCOUNT_GEO_AND_ADDRESS   = 526;

     C_2_S_COMMON_ROOM_POS_INFO     = 527;
     S_2_C_COMMON_ROOM_POS_INFO     = 528;

     C_2_S_COMMON_ROOM_CHAT_USE_EGG = 529;
     S_2_C_COMMON_ROOM_CHAT_USE_EGG = 530;

     C_2_S_COMMON_RECEIVE_REWARD = 551;
     S_2_C_COMMON_RECEIVE_REWARD = 552;
}

message C2S_CommonRoomRequireExit {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_REQUIRE_EXIT];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
}

message S2C_CommonRoomRequireExit {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_REQUIRE_EXIT];
        required int32 ret = 2;
        optional int64 room_id = 3;
        optional string login_name = 4;
        optional int32 force = 5;
        optional int32 disband_cd = 6;
}

message C2S_CommonRoomAgreeExit {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_AGREE_EXIT];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
        optional bool is_agree = 4;
}

message S2C_CommonRoomAgreeExit {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_AGREE_EXIT];
        required int32 ret = 2;
        optional int64 room_id = 3;
        optional string login_name = 4;
        optional bool is_agree = 5;
        optional int32 disband_cd = 6;
}

message C2S_CommonRoomDisband {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_DISBAND];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
}

message S2C_CommonRoomDisband {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_DISBAND];
        required int32 ret = 2;
        optional int64 room_id = 3;
        optional int32 disband_state = 4;
        optional string create_login_name = 5;
        optional int32 diamond = 6;
        optional int32 fangka = 7;
}

message C2S_CommonRoomInfo {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_INFO];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
}

message S2C_CommonRoomInfo {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_INFO];
        required int32 ret = 2;
        optional int64 room_id = 3;
        optional int32 rule_type = 4;
        optional string server_id = 5;
        optional string address = 6;
}

message CommonPlayer {
        required string login_name = 1;
        optional string role_name = 2;
        optional string head_url = 3;
}

message CommonRoom {
        required int64 room_id = 1;
        required int32 rule_type = 2;
        optional int32 ts = 3;
        optional int32 state = 4;
        optional int32 cur_round = 5;
        optional int32 max_round = 6;
        optional int32 player_limit = 7;
        optional int32 fan_limit = 8;
        optional int32 condition = 9;
        optional uint64 switch_set = 10;
        optional int32 room_level = 11;
        optional int32 base_val = 12;
        repeated CommonPlayer players = 13;
}
message C2S_CommonRoomList {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_LIST];
        optional int32 unique_id = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
}

message S2C_CommonRoomList {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_LIST];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        repeated CommonRoom rooms = 5;
}

message C2S_CommonLoadResultLogs {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_LOAD_RESULT_LOGS];
        optional int32 unique_id = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
}

message S2C_CommonLoadResultLogs {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_LOAD_RESULT_LOGS];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        repeated ResultReport reports = 5;
}

message C2S_CommonVoiceFileId {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_VOICE_FILEID];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
        optional string file_id = 4;
}

message S2C_CommonVoiceFileId {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_VOICE_FILEID];
        optional string login_name = 2;
        optional string file_id = 3;
}

message StoreReward {
        optional int32 type = 1;
        optional int32 value = 2;
        optional int32 nums = 3;
}

message C2S_CommonStoreBuy {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_STORE_BUY];
        required int32 game_type = 2;
        required int32 store_id = 3;
        required int32 goods_id = 4;
}

message S2C_CommonStoreBuy {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_STORE_BUY];
        required int32 ret = 2;
        optional int32 game_type = 3;
        optional int32 store_id = 4;
        optional int32 goods_id = 5;
        repeated StoreReward rewards = 6;
}

message StatGoldRoom {
        optional int32 level = 1;
        optional int32 alives = 2;
}
message C2S_CommonSomeStatistics {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_SOME_STATISTICS];
        required int32 rule_type = 2;
}

message S2C_CommonSomeStatistics {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_SOME_STATISTICS];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        repeated StatGoldRoom gold_room_alives = 4;
}

message C2S_CommonRoomChat {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_CHAT];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
        optional string std_emot = 4;
        optional string std_msg = 5;
        optional int32 std_msg_id = 6;
}

message S2C_CommonRoomChat {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_CHAT];
        required int32 ret = 2;
        optional int64 room_id = 3;
        optional string login_name = 4;
        optional string std_emot = 5;
        optional string std_msg = 6;
        optional int32 std_msg_id = 7;
}

message C2S_CommonRoomChatUseEgg {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_CHAT_USE_EGG];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
        optional int32 egg_id = 4;
        optional int32 egg_nums = 5;
        optional string to_login_name = 6;
}

message S2C_CommonRoomChatUseEgg {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_CHAT_USE_EGG];
        required int32 ret = 2;
        optional int64 room_id = 3;
        optional string login_name = 4;
        optional string to_login_name = 5;
        optional int32 egg_id = 6;
        optional int32 egg_nums = 7;
}

message CompetitionLog {
        optional int64 ts = 1;
        optional int32 persons = 2;
        optional int32 rank = 3;
        optional string rewards = 4;
        optional int32 rule_type = 5;
}

message C2S_CommonLoadCompetitionLogs {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_LOAD_COMPETITION_LOGS];
        optional int32 unique_id = 2;
        optional int32 rule_type = 3;
}

message S2C_CommonLoadCompetitionLogs {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_LOAD_COMPETITION_LOGS];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        repeated CompetitionLog logs = 4;
}

message C2S_CommonAccountGeoAndAddress {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ACCOUNT_GEO_AND_ADDRESS];
        optional double longitude = 2;
        optional double latitude = 3;
        optional string address = 4;
        optional string province = 5;
        optional string city = 6;
        optional string district = 7;
}

message S2C_CommonAccountGeoAndAddress {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ACCOUNT_GEO_AND_ADDRESS];
        required int32 ret = 2;
}

message C2S_CommonRoomPosInfo {
        optional CommonProtoType type = 1 [default = C_2_S_COMMON_ROOM_POS_INFO];
        optional int32 unique_id = 2;
        optional int64 room_id = 3;
}

message S2C_CommonRoomPosInfo {
        optional CommonProtoType type = 1 [default = S_2_C_COMMON_ROOM_POS_INFO];

        message PlayerInfo {
            optional string login_name = 1;
            optional double distance = 2;
            optional string address = 3;
        }

        message InteractInfo {
            optional string login_name = 1;
            optional string address = 2;
            repeated PlayerInfo infos = 3;
        }

        repeated InteractInfo infos = 2;
}

message C2S_CommonReceiveReward {
    optional CommonProtoType type = 1 [default = C_2_S_COMMON_RECEIVE_REWARD];
    optional int32 reward_id = 2;
}

message S2C_CommonReceiveReward {
    optional CommonProtoType type = 1 [default = S_2_C_COMMON_RECEIVE_REWARD];
    required int32 ret = 2;
    repeated TaskReward rewards = 3;
}
