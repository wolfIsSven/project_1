package protocol;
option optimize_for = SPEED;

enum ProtocolType {
     C_2_S_KEEP_ALIVE_ACK = 0;
     S_2_C_KEEP_ALIVE_ACK = 4;

     S_2_C_GATE_STATE         = 100;

     //login
     C_2_S_LOGIN_BASE         = 101;
     C_2_S_LOGIN_TOP          = 200;

     //main
     C_2_S_MAIN_BASE          = 201;
     C_2_S_MAIN_TOP           = 300;

     //gm or test
     //C_2_S_TEST_BASE          = 251;
     //C_2_S_TEST_TOP           = 300;

     //room
     C_2_S_ROOM_BASE          = 301;
     C_2_S_ROOM_TOP           = 400;

     //room mj
     C_2_S_ROOM_MJ_BASE          = 401;
     C_2_S_ROOM_MJ_TOP           = 500;

     //common
     C_2_S_COMMON_BASE          = 501;
     C_2_S_COMMON_TOP           = 600;

     //room niu
     C_2_S_ROOM_NIU_BASE          = 601;
     C_2_S_ROOM_NIU_TOP           = 700;

     //room dan
     C_2_S_ROOM_DAN_BASE          = 701;
     C_2_S_ROOM_DAN_TOP           = 800;

     //mail
     C_2_S_MAIL_BASE              = 801;
     C_2_S_MAIL_TOP               = 900;

     //match
     C_2_S_MATCH_BASE             = 1001;
     C_2_S_MATCH_TOP              = 1100;

     //friend circle
     C_2_S_FRIEND_CIRCLE_BASE     = 1101;
     C_2_S_FRIEND_CIRCLE_TOP      = 1200;

    //match redbag
     C_2_S_MATCH_REDBAG_BASE      = 1201;
     C_2_S_MATCH_REDBAG_TOP       = 1300;

        // buddy
        C_2_S_BUDDY_BASE                = 1401;
        S_2_C_BUDDY_TOP                 = 1500;
}

message C2S_SystemTick {
        optional ProtocolType type = 1 [default = C_2_S_KEEP_ALIVE_ACK];
}
message S2C_SystemTick {
        optional ProtocolType type = 1 [default = S_2_C_KEEP_ALIVE_ACK];
        required int32 keep_alive_ack = 2;
        required int32 server_time = 3;
}

message S2C_GateState {
        enum StateType {
             state_ok = 0;
             state_gs_offline = 1;
             state_server_is_full = 2;
        };
        optional ProtocolType type = 1 [default = S_2_C_GATE_STATE];
        required int32 state = 2;
        required int64 key = 3;
}

message PlayerInfo {
        optional int64 id = 1;
        optional string name = 2;
        optional int32 head = 3;
        optional int32 level = 4;
        optional int32 vip_lvl = 5;
}

message Attribute {
        optional int32 id = 1;
        optional double val = 2;
}

message Reward {
        required int32 type = 1;
        required int32 value = 2;
        required int32 nums = 3;
}
