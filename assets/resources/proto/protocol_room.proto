package protocol;

enum RoomProtoType {
     C_2_S_ROOM_LOAD          = 301;
     S_2_C_ROOM_LOAD          = 302;
     C_2_S_ROOM_CREATE        = 303;
     S_2_C_ROOM_CREATE        = 304;

     C_2_S_ROOM_JOIN          = 311;
     S_2_C_ROOM_JOIN          = 312;
     C_2_S_ROOM_PRE           = 313;
     S_2_C_ROOM_PRE           = 314;
     C_2_S_ROOM_CALL          = 315;
     S_2_C_ROOM_CALL          = 316;
     C_2_S_ROOM_PLAY_CARD     = 317;
     S_2_C_ROOM_PLAY_CARD     = 318;
     C_2_S_ROOM_AUTO          = 319;
     S_2_C_ROOM_AUTO          = 320;
     C_2_S_ROOM_CANCEL_AUTO   = 321;
     S_2_C_ROOM_CANCEL_AUTO   = 322;
     C_2_S_ROOM_DOUBLE        = 323;
     S_2_C_ROOM_DOUBLE        = 324;
     C_2_S_ROOM_SHOW_CARDS    = 325;
     S_2_C_ROOM_SHOW_CARDS    = 326;
     C_2_S_ROOM_CONTINUE      = 327;
     S_2_C_ROOM_CONTINUE      = 328;

     S_2_C_ROOM_DEALING_CARDS = 350;
     S_2_C_ROOM_STATE         = 352;
}

message C2S_RoomLoad {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_LOAD];
        optional int32 unique_id = 2;
}

message RoomState {
        required int64 id = 1;
        required int32 state = 2;
        optional int32 cur_index = 3;
        optional int32 cur_round = 4;
        optional int32 base_val = 5;
        optional int32 double_val = 6;
        optional int32 cur_max_call_point = 7;
        optional string call_point_login_name = 8;
        optional int32 bomb_nums = 9;
        optional int32 rocket_nums = 10;
        optional bool is_spring = 11;
        optional int32 bomb_limit = 12;
        optional int32 round_limit = 13;
        optional bool is_call_point = 14;
        optional int32 disband_cd = 15;
        repeated int32 table_cards = 16;
}

message PlayerState {
        required string login_name = 1;
        optional int32 index = 2;
        optional int32 state = 3;
        optional string role_name = 4;
        optional string head_url = 5;
        optional int32 identity = 6;
        optional int32 remain_card_nums = 7;
        optional int32 call_point = 8;
        optional int32 double_val = 9;
        optional int32 win_integal = 10;
        optional int32 total_integal = 11;
        optional int32 disband_state = 12;
        repeated int32 cards = 13;
        repeated int32 play_cards = 14;
}

message S2C_RoomLoad {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_LOAD];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional RoomState room_state = 7;
        repeated PlayerState player_state = 8;
}

message C2S_RoomCreate {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_CREATE];
        optional int32 unique_id = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 is_agent = 5;
        optional int32 bomb_limit = 6;
        optional int32 round_limit = 7;
        optional bool is_call_point = 8;
}

message S2C_RoomCreate {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_CREATE];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 is_agent = 5;
        optional int64 room_id = 6;
        optional int32 diamond = 7;
        optional int32 fangka = 8;
}

message C2S_RoomJoin {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_JOIN];
        optional int32 unique_id = 2;
        required int64 room_id = 3;
}

message S2C_RoomJoin {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_JOIN];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional PlayerState player = 7;
}

message C2S_RoomPre {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_PRE];
        optional int32 unique_id = 2;
}

message S2C_RoomPre {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_PRE];
        required int32 ret = 2;
        optional string login_name = 3;
}

message C2S_RoomCall {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_CALL];
        optional int32 unique_id = 2;
        optional int32 point = 3;
}

message S2C_RoomCall {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_CALL];
        required int32 ret = 2;
        optional int32 cur_index = 3;
        optional string login_name = 4;
        optional int32 state = 5;
        optional int32 point = 6;
        optional int32 cur_max_call_point = 7;
        optional int32 base_val = 8;
        optional int32 double_val = 9;
}

message C2S_RoomPlayCard {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_PLAY_CARD];
        optional int32 unique_id = 2;
        repeated int32 cards = 3;
}

message S2C_RoomPlayCard {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_PLAY_CARD];
        required int32 ret = 2;
        optional int32 cur_index = 3;
        optional string login_name = 4;
        optional int32 state = 5;
        optional int32 bomb_nums = 6;
        optional int32 remain_card_nums = 7;
        repeated int32 cards = 8;
        optional RoomState room_state = 9;
}

message C2S_RoomAuto {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_AUTO];
        optional int32 unique_id = 2;
}

message S2C_RoomAuto {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_AUTO];
        required int32 ret = 2;
}

message C2S_RoomCancelAuto {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_CANCEL_AUTO];
        optional int32 unique_id = 2;
}

message S2C_RoomCancelAuto {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_CANCEL_AUTO];
        required int32 ret = 2;
}

message C2S_RoomDouble {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_DOUBLE];
        optional int32 unique_id = 2;
        optional bool super = 3;
}

message S2C_RoomDouble{
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_DOUBLE];
        required int32 ret = 2;
        optional string login_name = 3;
        optional int32 double_val = 4;
        optional RoomState room_state = 5;
}

message C2S_RoomShowCards {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_SHOW_CARDS];
        optional int32 unique_id = 2;
}

message S2C_RoomShowCards{
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_SHOW_CARDS];
        required int32 ret = 2;
        repeated int32 cards = 3;
}

message C2S_RoomContinue {
        optional RoomProtoType type = 1 [default = C_2_S_ROOM_CONTINUE];
        optional int32 unique_id = 2;
}

message S2C_RoomContinue {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_CONTINUE];
        required int32 ret = 2;
}

message S2C_RoomDealingCards {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_DEALING_CARDS];
        optional int32 pre_win_index = 2;
        optional RoomState room_state = 3;
        repeated int32 cards = 4;
}

message S2C_RoomState {
        optional RoomProtoType type = 1 [default = S_2_C_ROOM_STATE];
        optional RoomState room_state = 2;
        repeated PlayerState player_state = 3;
}