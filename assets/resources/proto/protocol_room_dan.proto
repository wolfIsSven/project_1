package protocol;

enum RoomDanProtoType {
     C_2_S_ROOM_DAN_LOAD          = 701;
     S_2_C_ROOM_DAN_LOAD          = 702;
     C_2_S_ROOM_DAN_CREATE        = 703;
     S_2_C_ROOM_DAN_CREATE        = 704;

     C_2_S_ROOM_DAN_JOIN          = 711;
     S_2_C_ROOM_DAN_JOIN          = 712;
     C_2_S_ROOM_DAN_SET_POSITION  = 713;
     S_2_C_ROOM_DAN_SET_POSITION  = 714;
     C_2_S_ROOM_DAN_PRE           = 715;
     S_2_C_ROOM_DAN_PRE           = 716;
     C_2_S_ROOM_DAN_PLAY_CARD     = 717;
     S_2_C_ROOM_DAN_PLAY_CARD     = 718;
     C_2_S_ROOM_DAN_AUTO          = 719;
     S_2_C_ROOM_DAN_AUTO          = 720;
     C_2_S_ROOM_DAN_CANCEL_AUTO   = 721;
     S_2_C_ROOM_DAN_CANCEL_AUTO   = 722;
     C_2_S_ROOM_DAN_CONTINUE      = 723;
     S_2_C_ROOM_DAN_CONTINUE      = 724;
     C_2_S_ROOM_DAN_SEND_CARD     = 725;
     S_2_C_ROOM_DAN_SEND_CARD     = 726;

     S_2_C_ROOM_DAN_DEALING_CARDS = 750;
     S_2_C_ROOM_DAN_STATE         = 752;
}

message C2S_RoomDanLoad {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_LOAD];
        optional int32 unique_id = 2;
}

message RoomDanState {
        required int64 id = 1;
        required int32 state = 2;
        optional int32 cur_index = 3;
        optional int32 cur_round = 4;
        optional int32 base_val = 5;
        optional int32 rule_type = 6;
        optional int32 round_limit = 7;
        optional int32 pass_card = 8;
        optional int32 disband_cd = 9;
        optional int32 last_play_card_one = 10;
        optional int32 last_play_card_two = 11;
        optional int32 play_card_index = 12;
        optional string send_card_info = 13;
        repeated int32 win_indexs = 14;
}

message DanPlayerState {
        required string login_name = 1;
        optional int32 index = 2;
        optional int32 state = 3;
        optional string role_name = 4;
        optional string head_url = 5;
        optional int32 pre_you_state = 6;
        optional int32 remain_card_nums = 7;
        optional int32 win_integal = 8;
        optional int32 total_integal = 9;
        optional bool is_sit = 10;
        optional int32 disband_state = 11;
        repeated int32 cards = 12;
        repeated int32 play_cards = 13;
}

message S2C_RoomDanLoad {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_LOAD];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional RoomDanState room_state = 7;
        repeated DanPlayerState player_state = 8;
}

message C2S_RoomDanCreate {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_CREATE];
        optional int32 unique_id = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 is_agent = 5;
        optional int32 round_limit = 6;
}

message S2C_RoomDanCreate {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_CREATE];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 is_agent = 5;
        optional int64 room_id = 6;
        optional int32 diamond = 7;
        optional int32 fangka = 8;
}

message C2S_RoomDanJoin {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_JOIN];
        optional int32 unique_id = 2;
        required int64 room_id = 3;
}

message S2C_RoomDanJoin {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_JOIN];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional DanPlayerState player = 7;
}

message C2S_RoomDanSetPosition {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_SET_POSITION];
        optional int32 unique_id = 2;
        optional int32 index = 3;
}

message S2C_RoomDanSetPosition {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_SET_POSITION];
        required int32 ret = 2;
        optional string login_name = 3;
        optional int32 index = 4;
        optional string effect_login_name = 5;
        optional int32 effect_index = 6;
}

message C2S_RoomDanPre {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_PRE];
        optional int32 unique_id = 2;
}

message S2C_RoomDanPre {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_PRE];
        required int32 ret = 2;
        optional string login_name = 3;
}

message C2S_RoomDanPlayCard {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_PLAY_CARD];
        optional int32 unique_id = 2;
        repeated int32 cards = 3;
}

message S2C_RoomDanPlayCard {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_PLAY_CARD];
        required int32 ret = 2;
        optional int32 cur_index = 3;
        optional string login_name = 4;
        optional int32 state = 5;
        optional int32 remain_card_nums = 6;
        optional int32 win_index = 7;
        optional int32 jiefeng_index = 8;
        repeated int32 cards = 9;
        optional RoomDanState room_state = 10;
}

message C2S_RoomDanAuto {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_AUTO];
        optional int32 unique_id = 2;
}

message S2C_RoomDanAuto {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_AUTO];
        required int32 ret = 2;
}

message C2S_RoomDanCancelAuto {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_CANCEL_AUTO];
        optional int32 unique_id = 2;
}

message S2C_RoomDanCancelAuto {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_CANCEL_AUTO];
        required int32 ret = 2;
}

message C2S_RoomDanContinue {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_CONTINUE];
        optional int32 unique_id = 2;
}

message S2C_RoomDanContinue {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_CONTINUE];
        required int32 ret = 2;
}

message C2S_RoomDanSendCard {
        optional RoomDanProtoType type = 1 [default = C_2_S_ROOM_DAN_SEND_CARD];
        optional int32 unique_id = 2;
        optional int32 send_type = 3;
        optional int32 card = 4;
}

message S2C_RoomDanSendCard {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_SEND_CARD];
        required int32 ret = 2;
        optional int32 send_type = 3;
        optional int32 card = 4;
        optional int32 from_index = 5;
        optional int32 to_index = 6;
        optional string send_card_info = 7;
}

message S2C_RoomDanDealingCards {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_DEALING_CARDS];
        optional RoomDanState room_state = 2;
        repeated int32 cards = 3;
}

message S2C_RoomDanState {
        optional RoomDanProtoType type = 1 [default = S_2_C_ROOM_DAN_STATE];
        optional RoomDanState room_state = 2;
        repeated DanPlayerState player_state = 3;
}