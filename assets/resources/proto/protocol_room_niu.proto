package protocol;

enum RoomNiuProtoType {
     C_2_S_ROOM_NIU_LOAD          = 601;
     S_2_C_ROOM_NIU_LOAD          = 602;
     C_2_S_ROOM_NIU_CREATE        = 603;
     S_2_C_ROOM_NIU_CREATE        = 604;

     C_2_S_ROOM_NIU_JOIN          = 611;
     S_2_C_ROOM_NIU_JOIN          = 612;
     C_2_S_ROOM_NIU_PRE           = 613;
     S_2_C_ROOM_NIU_PRE           = 614;
     C_2_S_ROOM_NIU_START         = 615;
     S_2_C_ROOM_NIU_START         = 616;
     C_2_S_ROOM_NIU_CALL          = 617;
     S_2_C_ROOM_NIU_CALL          = 618;
     C_2_S_ROOM_NIU_POINT         = 619;
     S_2_C_ROOM_NIU_POINT         = 620;
     C_2_S_ROOM_NIU_SHOW          = 621;
     S_2_C_ROOM_NIU_SHOW          = 622;

     S_2_C_ROOM_NIU_DEALING_CARDS = 650;
     S_2_C_ROOM_NIU_STATE         = 652;
}

message C2S_RoomNiuLoad {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_LOAD];
        optional int32 unique_id = 2;
}

message RoomNiuSetting {
        optional int32 niu_type = 1;
        optional int32 base_val = 2;
        optional int32 double_index = 3;
        optional int32 max_call_point = 4;
        optional int32 round_limit = 5;
        optional int32 condition = 6;
        optional int32 tuizhu_double = 7;
        optional bool is_continue_tuizhu = 8;
}

message RoomNiuState {
        required int64 id = 1;
        required int32 state = 2;
        optional int32 cur_round = 3;
        optional int32 banker_call_point = 4;
        optional string banker_login_name = 5;
        optional int32 state_cd = 6;
        optional int32 disband_cd = 7;
}

message NiuPlayerInfo {
        required string login_name = 1;
        optional int32 index = 2;
        optional int32 state = 3;
        optional string role_name = 4;
        optional string head_url = 5;
        optional int32 call_point = 6;
        optional int32 base_val = 7;
        optional int32 win_integal = 8;
        optional int32 total_integal = 9;
        optional int32 disband_state = 10;
        repeated int32 cards = 11;
        optional int32 card_niu_type = 12;
}

message S2C_RoomNiuLoad {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_LOAD];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional string creater_login_name = 7;
        optional RoomNiuSetting setting = 8;
        optional RoomNiuState room_state = 9;
        repeated NiuPlayerInfo player_info = 10;
}

message C2S_RoomNiuCreate {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_CREATE];
        optional int32 unique_id = 2;
        optional int32 niu_type = 3;
        optional int32 room_type = 4;
        optional int32 is_agent = 5;
        optional int32 base_val = 6;
        optional int32 double_index = 7;
        optional int32 max_call_point = 8;
        optional int32 round_limit = 9;
        optional int32 condition = 10;
        optional int32 tuizhu_double = 11;
        optional bool is_continue_tuizhu = 12;
}

message S2C_RoomNiuCreate {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_CREATE];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 is_agent = 5;
        optional int64 room_id = 6;
        optional int32 diamond = 7;
        optional int32 fangka = 8;
}

message C2S_RoomNiuJoin {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_JOIN];
        optional int32 unique_id = 2;
        required int64 room_id = 3;
}

message S2C_RoomNiuJoin {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_JOIN];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional NiuPlayerInfo player_info = 7;
}

message C2S_RoomNiuPre {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_PRE];
        optional int32 unique_id = 2;
}

message S2C_RoomNiuPre {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_PRE];
        required int32 ret = 2;
        optional string login_name = 3;
}

message C2S_RoomNiuStart {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_START];
        optional int32 unique_id = 2;
}

message S2C_RoomNiuStart {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_START];
        required int32 ret = 2;
}

message C2S_RoomNiuCall {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_CALL];
        optional int32 unique_id = 2;
        optional int32 point = 3;
}

message S2C_RoomNiuCall {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_CALL];
        required int32 ret = 2;
        optional string login_name = 3;
        optional int32 state = 4;
        optional int32 call_point = 5;
}

message C2S_RoomNiuPoint {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_POINT];
        optional int32 unique_id = 2;
        optional int32 point = 3;
}

message S2C_RoomNiuPoint{
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_POINT];
        required int32 ret = 2;
        optional string login_name = 3;
        optional int32 point = 4;
}

message C2S_RoomNiuShow {
        optional RoomNiuProtoType type = 1 [default = C_2_S_ROOM_NIU_SHOW];
        optional int32 unique_id = 2;
}

message S2C_RoomNiuShow{
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_SHOW];
        required int32 ret = 2;
        optional string login_name = 3;
        repeated int32 cards = 4;
        optional int32 niu_type = 5;
}

message S2C_RoomNiuDealingCards {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_DEALING_CARDS];
        optional int32 pre_win_index = 2;
        optional RoomNiuState room_state = 3;
        repeated int32 cards = 4;
}

message S2C_RoomNiuState {
        optional RoomNiuProtoType type = 1 [default = S_2_C_ROOM_NIU_STATE];
        optional RoomNiuState room_state = 2;
        repeated NiuPlayerInfo player_info = 3;
}