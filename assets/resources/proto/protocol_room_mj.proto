package protocol;

enum RoomMjProtoType {
     C_2_S_ROOM_MJ_LOAD          = 401;
     S_2_C_ROOM_MJ_LOAD          = 402;
     C_2_S_ROOM_MJ_CREATE        = 403;
     S_2_C_ROOM_MJ_CREATE        = 404;

     C_2_S_ROOM_MJ_QUICK_JOIN    = 409;
     S_2_C_ROOM_MJ_QUICK_JOIN    = 410;
     C_2_S_ROOM_MJ_JOIN          = 411;
     S_2_C_ROOM_MJ_JOIN          = 412;
     C_2_S_ROOM_MJ_PRE           = 413;
     S_2_C_ROOM_MJ_PRE           = 414;
     C_2_S_ROOM_MJ_CHOOSE        = 415;
     S_2_C_ROOM_MJ_CHOOSE        = 416;
     C_2_S_ROOM_MJ_PLAY_CARD     = 417;
     S_2_C_ROOM_MJ_PLAY_CARD     = 418;
     C_2_S_ROOM_MJ_CHI           = 419;
     S_2_C_ROOM_MJ_CHI           = 420;
     C_2_S_ROOM_MJ_AUTO          = 421;
     S_2_C_ROOM_MJ_AUTO          = 422;
     C_2_S_ROOM_MJ_CONTINUE      = 423;
     S_2_C_ROOM_MJ_CONTINUE      = 424;     
     C_2_S_ROOM_MJ_BET           = 425;
     S_2_C_ROOM_MJ_BET           = 426;
     C_2_S_ROOM_MJ_LAST_RECORD   = 427;
     S_2_C_ROOM_MJ_LAST_RECORD   = 428;
     C_2_S_ROOM_MJ_BUHUA         = 429;
     S_2_C_ROOM_MJ_BUHUA         = 430; 
     C_2_S_ROOM_MJ_SWAP_CARD     = 431;    
     S_2_C_ROOM_MJ_SWAP_CARD     = 432;
     C_2_S_ROOM_MJ_GIVEUP        = 433;    
     S_2_C_ROOM_MJ_GIVEUP        = 434;
     C_2_S_ROOM_MJ_CLICK_TING    = 435;
     S_2_C_ROOM_MJ_CLICK_TING    = 436;
     C_2_S_ROOM_MJ_ROUND_RESULT  = 437;
     S_2_C_ROOM_MJ_ROUND_RESULT  = 438;
     C_2_S_ROOM_MJ_TING_INFO     = 439;
     S_2_C_ROOM_MJ_TING_INFO     = 440;
     C_2_S_ROOM_MJ_YING_KOU      = 441;
     S_2_C_ROOM_MJ_YING_KOU      = 442;
     C_2_S_ROOM_MJ_LIANG_XI      = 445;
     S_2_C_ROOM_MJ_LIANG_XI      = 446;
     C_2_S_ROOM_MJ_SHOW_CARD     = 447;
     S_2_C_ROOM_MJ_SHOW_CARD     = 448;

     S_2_C_ROOM_MJ_DEALING_CARDS = 450;
     S_2_C_ROOM_MJ_TRIGGER_CHI   = 452;
     S_2_C_ROOM_MJ_STATE         = 454;
     S_2_C_ROOM_MJ_BET_CHOICE    = 456;
     S_2_C_ROOM_MJ_CATCH_GANGTOU = 458;     
     S_2_C_ROOM_MJ_BEST_SWAP     = 462;
     S_2_C_ROOM_MJ_BEST_COLOR    = 464;
     S_2_C_ROOM_MJ_SWAP_RES      = 466;
     S_2_C_ROOM_MJ_EXTRA_WININFO = 468;     
     S_2_C_ROOM_MJ_WIN_HIS       = 470;
     S_2_C_ROOM_MJ_LOSER_HU_INFO = 472;
     S_2_C_ROOM_MJ_BAO_INFO      = 474;
     S_2_C_ROOM_MJ_GIVEUP_RES    = 476;
     S_2_C_ROOM_MJ_PIAO_INFO     = 478;
     S_2_C_ROOM_MJ_BAO_CARD      = 479;
     S_2_C_ROOM_MJ_CAN_LIANG_XI  = 480;
     S_2_C_ROOM_MJ_TI  = 482;
}

message RoomMjState {
        required int64 id = 1;
        required int32 state = 2;
        optional int32 cur_index = 3;
        optional int32 cur_round = 4;
        optional int32 circle_wind = 5;
        optional int32 round_limit = 6;
        optional int32 remain_card_nums = 7;
        optional int32 condition = 8;
        optional int32 player_limit = 9;
        optional uint64 switch_set = 10;
        optional int32 disband_cd = 11;
        optional string create_login_name = 12;
        optional int32 state_cd = 13;
        optional uint32 dice = 14;
        optional int32 fan_limit = 15;
        optional int32 bird_limit = 16;
}

message ChiCard {        
        required int32 card_id = 1;
        required int32 card_type = 2;
        optional int32 from_index = 3;
        optional int32 to_index = 4;
        optional int32 chi_pos_bit = 5;
        optional int32 hu_num = 6;
        optional int32 lz_card = 7;
}

message HuGroup {
        repeated int32 card = 1;        
}

message HuNumInfo {
    required int32 type = 1;
    optional int32 value = 2;
}

message LoserHuInfo {
    required int32 index = 1;
    repeated HuNumInfo hu_num_info = 2;
    optional int32 hu_num = 3;
}

message HuCardInfo {        
        required int32 hu_card = 1;
        required uint64 hu_type = 2;
        repeated uint64 hu_sub_type = 3;
        optional uint64 extra_type = 4;
        repeated HuNumInfo hu_num_info = 5;
        repeated HuGroup hu_group = 6;
        optional int32 from_index = 7;        
        optional string from_login_name = 8;        
        repeated int32 bao_indexs = 9;
        optional int32 hu_num = 10;
        repeated int32 more_hu_indexs = 11;
}
                                                
message MjPlayerInfo {
        required string login_name = 1;
        optional int32 index = 2;
        optional int32 state = 3;
        optional string role_name = 4;
        optional string head_url = 5;
        optional int32 choose_color = 6;
        optional int32 win_integal = 7;
        optional int32 total_integal = 8;
        optional int32 remain_card_nums = 9;
        optional int32 mo_card = 10;
        optional int32 auto = 11;
        optional int32 disband_state = 12;        
        repeated int32 cards = 13;
        repeated int32 used_cards = 14;
        repeated ChiCard chi_cards = 15;
        repeated int32 hua_cards = 16;
        repeated HuCardInfo hu_cards = 17;
        optional uint32 bet = 18;
        optional int32 click_ting = 19;
        optional int32 piao_type = 20;       
        optional int32 piao_state = 21;
        optional uint32 ji_type = 22;
        repeated int32 limited_cards = 23;
        optional int32 ying_kou = 24;
        optional bool is_show_card = 25;
        optional bool is_liang_xi = 26;
}

message MoCardInfo {
        required int32 card_id = 1;
        optional ChiCard chi_card = 2;
}

message MjLastRecord {
        required string login_name = 1;
        optional int32 dianpao = 2;
        optional int32 pinghu = 3;
        optional int32 zimo = 4;
        optional int32 qingyise = 5;
        optional int32 duiduihu = 6;
        optional int32 qiazi = 7;
        optional int32 integal = 8;
        optional bool dianpaowang = 9;
}

message MjGtCard {
    required int32 card = 1;
    optional int32 type = 2;
}

message MjGangtou {
    required int32 index = 1;
    repeated MjGtCard gt_cards = 2;
    optional int32 value = 3;
}

message MjTingInfo {
    required int32 card = 1;
    repeated int32 tings = 2;   
}

message MjWinVal {
    required int32 index = 1;
    optional int32 actual_win = 2;
}

message MjExtraWinInfo {
    required int32 win_type = 1;
    repeated MjWinVal win_vals = 2;
}

message MjWinInfo {
    required int32 win_type = 1;
    optional int32 actual_win = 2;
    optional int32 from_index = 3;
    optional int32 rate = 4;
    optional uint64 hu_type = 5;
    repeated uint64 hu_sub_type = 6;
    optional uint64 extra_type = 7;    
}

message MjWinHis {
    required int32 index = 1;
    repeated MjWinInfo all_win_info = 2;    
}

message MjRoundLog {
        required string login_name = 1;
        required int32 index = 2;
        required int32 win_integal = 3;
        repeated int32 cards = 4;        
        repeated ChiCard chi_cards = 5;
        repeated int32 hua_cards = 6;
        repeated HuCardInfo hu_cards = 7;
}

message C2S_RoomMjLoad {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_LOAD];
        optional int32 unique_id = 2;
}

message S2C_RoomMjLoad {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_LOAD];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional RoomMjState room_state = 7;
        repeated MjPlayerInfo player_state = 8;        
        repeated int32 baida = 9;                      
        optional int32 auto_cd = 10;
        optional int32 bao_card = 11;
        optional int32 lian_zhuang = 12;
}

message C2S_RoomMjCreate {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_CREATE];
        optional int32 unique_id = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 room_level = 5;
        optional string room_name = 6;
        optional int32 is_agent = 7;
        optional int32 condition = 8;
        optional int32 round_limit = 9;
        optional int32 player_limit = 10;
        optional int32 fan_limit = 11;
        optional int32 bird_limit = 12;
        optional uint64 switch_set = 13;
        optional int32 base_val = 14;
        optional int32 pay_type = 15;
}

message S2C_RoomMjCreate {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CREATE];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int32 room_type = 4;
        optional int32 room_level = 5;
        optional string room_name = 6;
        optional int32 is_agent = 7;
        optional int64 room_id = 8;
        optional int32 condition = 9;
        optional int32 diamond = 10;
        optional int32 fangka = 11;
        optional int32 base_val = 12;
}

message C2S_RoomMjQuickJoin {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_QUICK_JOIN];
        optional int32 unique_id = 2;
        required int32 rule_type = 3;
        required int32 room_type = 4;
        optional int32 room_level = 5;
        optional int64 pre_room_id = 6;
}

message S2C_RoomMjQuickJoin {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_QUICK_JOIN];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional MjPlayerInfo player = 7;
}

message C2S_RoomMjJoin {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_JOIN];
        optional int32 unique_id = 2;
        required int64 room_id = 3;
        optional int32 room_type = 4;
        optional int32 room_level = 5;
}

message S2C_RoomMjJoin {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_JOIN];
        required int32 ret = 2;
        optional int32 rule_type = 3;
        optional int64 room_id = 4;
        optional int32 room_type = 5;
        optional int32 room_level = 6;
        optional MjPlayerInfo player = 7;
}

message C2S_RoomMjPre {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_PRE];
        optional int32 unique_id = 2;
}

message S2C_RoomMjPre {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_PRE];
        required int32 ret = 2;
        optional string login_name = 3;
}

message C2S_RoomMjChoose {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_CHOOSE];
        optional int32 unique_id = 2;
        optional int32 index = 3;
        optional int32 color = 4;
}

message S2C_RoomMjChoose {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CHOOSE];
        required int32 ret = 2;        
}

message C2S_RoomMjPlayCard {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_PLAY_CARD];
        optional int32 unique_id = 2;
        optional int32 card = 3;
}

message S2C_RoomMjPlayCard {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_PLAY_CARD];
        required int32 ret = 2;
        optional int32 index = 3;
        optional int32 card = 4;        
        optional int32 cur_index = 5;
        optional int32 remain_card_nums = 6;
        optional int32 mo_card = 7;                                       
}

message C2S_RoomMjChi {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_CHI];
        optional int32 unique_id = 2;
        optional int32 card = 3;
        optional int32 card_type = 4;
        optional int32 index = 5;
        optional int32 from_index = 6;
        optional int32 from_pre_chi_type = 7;
        optional int32 from_pre_chi_card = 8;
        optional int32 chi_pos = 9;   
}

message S2C_RoomMjChi{
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CHI];
        required int32 ret = 2;
        optional int32 card = 3;
        optional int32 card_type = 4;
        optional int32 from_index = 5;
        optional MjPlayerInfo player = 6;
        optional int32 mo_card = 7;            
        optional int32 cur_index = 9;        
        optional int32 remain_card_nums = 10;
        optional MjPlayerInfo from_player = 11;        
}
                                        
message C2S_RoomMjAuto {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_AUTO];
        optional int32 unique_id = 2;
        optional int32 auto = 3;
}

message S2C_RoomMjAuto {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_AUTO];
        required int32 ret = 2;
        optional int32 index = 3;
        optional int32 auto = 4;
}

message C2S_RoomMjContinue {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_CONTINUE];
        optional int32 unique_id = 2;
}

message S2C_RoomMjContinue {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CONTINUE];
        required int32 ret = 2;
}

message C2S_RoomMjBet {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_BET];
        optional int32 unique_id = 2;   
        optional uint32 bet = 3;     
}

message S2C_RoomMjBet {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BET];
        required int32 ret = 2;        
        optional int32 player_index = 3;
        optional uint32 bet = 4; 
        optional string login_name = 5;
}

message C2S_RoomMjLastRecord {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_LAST_RECORD];
        optional int32 unique_id = 2;  
        required int32 room_type = 3;               
}

message S2C_RoomMjLastRecord {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_LAST_RECORD];
        required int32 ret = 2;        
        repeated MjLastRecord last_record = 3;
}

message C2S_RoomMjBuHua {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_BUHUA];
        optional int32 unique_id = 2;       
        repeated int32 hua_cards = 3;                
}

message S2C_RoomMjBuHua {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BUHUA];
        required int32 ret = 2;  
        required int32 index = 3;      
        repeated int32 cards = 4;        
}

message C2S_RoomMjSwapCard {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_SWAP_CARD];
        optional int32 unique_id = 2;       
        repeated int32 cards = 3;                
}

message S2C_RoomMjSwapCard {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_SWAP_CARD];
        required int32 ret = 2;          
}

message C2S_RoomMjGiveup {
        optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_GIVEUP];
        optional int32 unique_id = 2;       
        optional int32 val = 3;            
}

message S2C_RoomMjGiveup {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_GIVEUP];
        required int32 ret = 2;          
}

message C2S_RoomMjClickTing {
    optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_CLICK_TING];
    optional int32 unique_id = 2;
    optional int32 card = 3;
    optional bool is_show = 4;
}

message S2C_RoomMjClickTing {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CLICK_TING];
    required int32 ret = 2;
    optional int32 index = 3;
    optional int32 click_ting = 4;
    optional int32 card = 5;    
}

message C2S_RoomMjRoundResult {
    optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_ROUND_RESULT];
    optional int32 unique_id = 2;    
}

message S2C_RoomMjRoundResult {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_ROUND_RESULT];
    required int32 ret = 2;
    repeated MjRoundLog round_logs = 3;
}

message C2S_RoomMjTingInfo {
    optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_TING_INFO];
    optional int32 unique_id = 2;    
}

message S2C_RoomMjTingInfo {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_TING_INFO];
        required int32 ret = 2;
        repeated MjTingInfo ting_info = 3;
        optional bool is_begin = 4;
}

message C2S_RoomMjLiangXi {
    optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_LIANG_XI];
    optional int32 unique_id = 2;    
}

message S2C_RoomMjLiangXi {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_LIANG_XI];
        required int32 ret = 2;
        required int32 index = 3;        
}

message C2S_RoomMjShowCard {
    optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_SHOW_CARD];
    optional int32 unique_id = 2;    
}

message S2C_RoomMjShowCard {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_SHOW_CARD];
        required int32 ret = 2;        
}

message S2C_RoomMjCanLiangXi {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CAN_LIANG_XI];            
}

message S2C_RoomMjDealingCards {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_DEALING_CARDS];
        optional int32 pre_win_index = 2;
        optional RoomMjState room_state = 3;        
        repeated int32 cards = 4;
        repeated int32 baida = 5;                
        optional int32 auto_cd = 6;
        optional int32 bao_card = 7;
        optional int32 lian_zhuang = 8;
}

message S2C_RoomMjTriggerChi {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_TRIGGER_CHI];                
        repeated ChiCard triggered_chi_cards = 6;                    
}

message S2C_RoomMjState {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_STATE];
        optional RoomMjState room_state = 2;
        repeated MjPlayerInfo player_state = 3;
        repeated int32 chajiao_indexs = 4;
        repeated int32 bird_cards = 5;
}

message S2C_RoomMjBetChoice {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BET_CHOICE];
        optional uint32 bc = 2;        
}

message S2C_RoomMjCatchGangtou {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_CATCH_GANGTOU];
        repeated MjGangtou gangtous = 2;        
}

message S2C_RoomMjBestSwap {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BEST_SWAP];
        repeated int32 cards = 2;        
}

message S2C_RoomMjBestColor {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BEST_COLOR];
        optional int32 color = 2;        
}

message S2C_RoomMjSwapRes {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_SWAP_RES];
        required int32 swap_way = 2;        
        repeated int32 pre_cards = 3;
        repeated int32 nxt_cards = 4;
}

message S2C_RoomMjExtraWinInfo {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_EXTRA_WININFO];
        repeated MjExtraWinInfo extra_wins = 2;
}

message S2C_RoomMjWinHis {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_WIN_HIS];        
        repeated MjWinHis all_win_his = 2;      
}

message S2C_RoomMjLoserHuInfo {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_LOSER_HU_INFO];        
        repeated LoserHuInfo loser_hu_infos = 2;      
}

message S2C_RoomMjBaoInfo {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BAO_INFO];
    optional int32 index = 2;
    optional int32 from_index = 3;
}

message S2C_RoomMjGiveupRes {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_GIVEUP_RES];
    optional int32 index = 2;
    optional int32 val = 3;
}

message S2C_RoomMjPiaoInfo {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_PIAO_INFO];
    optional int32 piao_index = 2;
    optional int32 piao_type = 3;
    optional int32 piao_state = 4;
}

message S2C_RoomMjBaoCard {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_BAO_CARD];
    optional int32 bao_card = 2;    
}

message C2S_RoomMjYingKou {
    optional RoomMjProtoType type = 1 [default = C_2_S_ROOM_MJ_YING_KOU];
    optional int32 unique_id = 2;
}

message S2C_RoomMjYingKou {
    optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_YING_KOU];
    required int32 ret = 2;
    optional int32 index = 3;
    optional int32 ying_kou = 4;
}

message S2C_RoomMjTi {
        optional RoomMjProtoType type = 1 [default = S_2_C_ROOM_MJ_TI];            
        optional int32 index = 2;
        optional int32 mo_card = 3;
        optional int32 lz_card = 4;
}